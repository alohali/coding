{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"re",
				"ret"
			],
			[
				"le",
				"level"
			],
			[
				"nei",
				"neigh"
			],
			[
				"pus",
				"push"
			],
			[
				"r",
				"root"
			],
			[
				"ret",
				"return"
			],
			[
				"ed",
				"edges"
			],
			[
				"edg",
				"edge"
			],
			[
				"e",
				"edge"
			],
			[
				"en",
				"end"
			],
			[
				"un",
				"unordered_map"
			],
			[
				"uno",
				"unionSet"
			],
			[
				"id",
				"idb"
			],
			[
				"la",
				"label"
			],
			[
				"new",
				"newNode"
			],
			[
				"st",
				"sta0"
			],
			[
				"lab",
				"labelSet"
			],
			[
				"und",
				"UndirectedGraphNode"
			],
			[
				"ve",
				"vector"
			],
			[
				"de",
				"degrees"
			],
			[
				"deg",
				"degree"
			],
			[
				"ma",
				"make_graph"
			],
			[
				"pr",
				"prerequisites"
			],
			[
				"pad",
				"padw"
			],
			[
				"u",
				"uv"
			],
			[
				"out",
				"OutputCpu"
			],
			[
				"h",
				"h_src"
			],
			[
				"size",
				"sizeof"
			],
			[
				"tes",
				"TEST"
			],
			[
				"pa",
				"param"
			],
			[
				"lay",
				"layerParam"
			],
			[
				"filt",
				"filterStrideA"
			],
			[
				"convl",
				"convLayer"
			],
			[
				"spl",
				"splitMode"
			],
			[
				"wo",
				"woff"
			],
			[
				"ne",
				"needReshape"
			],
			[
				"set",
				"LayerSetUp"
			],
			[
				"el",
				"else"
			],
			[
				"se",
				"LayerSetUp"
			],
			[
				"siz",
				"sizeof"
			],
			[
				"offset",
				"memOffset"
			],
			[
				"para",
				"param"
			],
			[
				"outw",
				"out_w"
			],
			[
				"G",
				"gm200"
			],
			[
				"spli",
				"split8NetParam"
			],
			[
				"Sp",
				"splitMode"
			],
			[
				"conv",
				"convNum"
			],
			[
				"wei",
				"weight"
			],
			[
				"con",
				"convCnt"
			],
			[
				"mem",
				"memOffset"
			],
			[
				"par",
				"param"
			],
			[
				"part",
				"part"
			],
			[
				"co",
				"copy2GPU"
			],
			[
				"odi",
				"odimFull"
			],
			[
				"dim",
				"dimM"
			],
			[
				"outp",
				"outputPart"
			],
			[
				"ful",
				"fullParam"
			],
			[
				"output",
				"OutputSize"
			],
			[
				"ru",
				"RunCPU"
			],
			[
				"net",
				"NetParam"
			],
			[
				"fu",
				"fullNet"
			],
			[
				"copy",
				"copy2CPU"
			],
			[
				"outpu",
				"output_"
			],
			[
				"convwei",
				"ConvWeightSize"
			],
			[
				"pu",
				"push_back"
			],
			[
				"he",
				"h_weight"
			],
			[
				"weig",
				"Weights"
			],
			[
				"wor",
				"workSpace_"
			],
			[
				"bind",
				"bindRegion"
			],
			[
				"poo",
				"poolP0"
			],
			[
				"data",
				"dataP0"
			],
			[
				"works",
				"workSpace_"
			],
			[
				"max",
				"maxWorkSpace"
			],
			[
				"DST",
				"dst0"
			],
			[
				"ge",
				"getBuf"
			],
			[
				"cud",
				"cudnnLayer"
			],
			[
				"nor",
				"NORM"
			],
			[
				"ty",
				"type"
			],
			[
				"cund",
				"cudnnLayer"
			],
			[
				"sp",
				"SplitRegionLen"
			],
			[
				"fi",
				"filterDim"
			],
			[
				"lr",
				"lrnN"
			],
			[
				"lrn",
				"lrnAlpha"
			],
			[
				"resul",
				"ResultDim"
			],
			[
				"te",
				"testTensor"
			],
			[
				"get",
				"getDataType"
			],
			[
				"arg",
				"argc"
			],
			[
				"lrnp",
				"LrnParam"
			],
			[
				"al",
				"alloc"
			],
			[
				"ar",
				"argc"
			],
			[
				"lef",
				"LeftHillow"
			],
			[
				"we",
				"weightSize"
			],
			[
				"sz",
				"size_t"
			],
			[
				"me",
				"MemSize"
			],
			[
				"Lya",
				"layerParam"
			],
			[
				"dat",
				"dataType"
			],
			[
				"ASS",
				"assert"
			],
			[
				"cop",
				"copy2CPU"
			],
			[
				"com",
				"COMPARESPLIT"
			],
			[
				"da",
				"dataDim"
			],
			[
				"ME",
				"memS1"
			],
			[
				"MEM",
				"memS0"
			],
			[
				"pic",
				"pic_w"
			],
			[
				"POO",
				"PoolUV"
			],
			[
				"inc",
				"in_c"
			],
			[
				"in",
				"inc\t#include \"â€¦\""
			],
			[
				"Te",
				"TESTCONV"
			],
			[
				"po",
				"poolDim"
			],
			[
				"di",
				"dimM"
			],
			[
				"cudnn",
				"cudnnHandle"
			],
			[
				"for",
				"forward"
			],
			[
				"dst",
				"dst"
			],
			[
				"ds",
				"dst_cs"
			],
			[
				"MA",
				"maxpool"
			],
			[
				"str",
				"stride"
			],
			[
				"src",
				"src_hs"
			],
			[
				"nem",
				"nameParse"
			],
			[
				"cudame",
				"cudaMemcpy"
			],
			[
				"bi",
				"bindRegion"
			],
			[
				"si",
				"size_t"
			],
			[
				"len",
				"len"
			],
			[
				"szi",
				"size_t"
			],
			[
				"be",
				"beta"
			],
			[
				"fo",
				"forward"
			],
			[
				"c",
				"convLayer"
			],
			[
				"cn",
				"cudnnContext"
			],
			[
				"a",
				"algorithm"
			],
			[
				"fre",
				"freeMem"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/cygwin/home/alohal/coding/practice/310.cpp",
			"settings":
			{
				"buffer_size": 2116,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 490.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"c++",
				"Set Syntax: C++"
			]
		],
		"width": 703.0
	},
	"console":
	{
		"height": 626.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/cygwin/home/alohal/coding",
		"/C/cygwin/home/alohal/coding/practice"
	],
	"file_history":
	[
		"/C/cygwin/home/alohal/coding/practice/128.cpp",
		"/C/cygwin/home/alohal/coding/subLime/coding.sublime-project",
		"/C/Users/alohal/Desktop/temp200.cpp",
		"/C/Users/alohal/Desktop/temp.cpp",
		"/Y/coding/practice/133.cpp",
		"/Y/coding/practice/207.cpp",
		"/Y/coding/207/code.c",
		"/Y/coding/210/code.c",
		"/Y/cudaopt/include/gpuFunc.hxx",
		"/Y/cudaopt/cudnnTest/main.cu",
		"/Y/cudaopt/pooling/pooling.cu",
		"/Y/cudaopt/pooling/makefile",
		"/Y/cudaopt/test/haloCalc.c",
		"/Y/cudaopt/include/util.h",
		"/Y/cudaopt/pooling/main.cu",
		"/Y/cudaopt/biascopy/biascopy.cu",
		"/Y/cudaopt/include/cpuFunc.hxx",
		"/Y/cudaopt/cudnnTest/net.hxx",
		"/Y/cudaopt/cudnnTest/makefile",
		"/Y/cudaopt/usefulCode/implicit gemm/conv2d_experimental_sgemm.cu",
		"/Y/cudaopt/test/powf.sass",
		"/Y/cudaopt/cudnnTest/test.cu",
		"/Y/cudaopt/cudnnTest/layers.hxx",
		"/Y/cudaopt/implicitGEMM/imGemm.cu",
		"/Y/cudaopt/cudnnTest/44.txt",
		"/Y/cudaopt/cudnnTest/aa.txt",
		"/Y/cudaopt/cudnnTest/66.txt",
		"/Y/cudaopt/cudnnTest/77.txt",
		"/Y/cudaopt/cudnnTest/55.txt",
		"/Y/cudaopt/cudnnTest/splitnet.cu",
		"/Y/cudaopt/cudnnTest/1.txt",
		"/Y/cudaopt/cudnnTest/3.txt",
		"/Y/cudaopt/cudnnTest/2.txt",
		"/Y/cudaopt/cudnnTest/4.txt",
		"/Y/cudaopt/cudnnTest/1.csv",
		"/Y/cudaopt/cudnnTest/a.csv",
		"/Y/cudaopt/cudnnTest/all.csv",
		"/Y/cudaopt/cudnnTest/all2.csv",
		"/Y/cudaopt/cudnnTest/all3.csv",
		"/Y/cudaopt/cudnnTest/12.csv",
		"/Y/cudaopt/cudnnTest/123.csv",
		"/Y/cudaopt/split.txt",
		"/Y/cudaopt/cudnnTest/cudnn.h",
		"/Y/cudaopt/script/autorun.py",
		"/Y/cudaopt/biggemm/biggemm.cu",
		"/Y/cudaopt/test/lrn.sass",
		"/Y/cudaopt/test/test.cu",
		"/Y/cudaopt/script/parsecsv.py",
		"/Y/cudaopt/pooling/util.h",
		"/Y/cudaopt/implicitGEMM/imGemm.sass",
		"/Y/cudaopt/implicitGEMM/imGemmGeneral.cu",
		"/Y/cudaopt/implicitGEMM/imGemm.hxx",
		"/Y/cudaopt/cudnnTest/lenet.cu",
		"/Y/cudaopt/implicitGEMM/makefile",
		"/Y/cudaopt/implicitGEMM/cpuFunc.hxx",
		"/Y/cudaopt/cudnnTest/cpuFunc.hxx",
		"/Y/cudaopt/script/driveNetNVPDM.txt",
		"/Y/cudaopt/script/NVHelNetNVPDM.txt",
		"/Y/cudaopt/usefulCode/cudnn-training-master/lenet.cu",
		"/Y/cudaopt/cudnnTest/util.h",
		"/Y/cudaopt/cudnnTest/layers.cu",
		"/Y/cudaopt/usefulCode/cudnn-training-master/makefile",
		"/Y/cudaopt/usefulCode/cudnn-training-master/splitnet.cu",
		"/Y/cudaopt/pooling/cpuFunc.hxx",
		"/Y/cudaopt/pooling/pool.cu",
		"/Y/cudaopt/script/gietest.py",
		"/Y/cudaopt/usefulCode/cudnn-training-master/softmax.cu",
		"/Y/cudaopt/usefulCode/cudnn-training-master/readubyte.cpp",
		"/Y/dittree/sw/gpgpu/MachineLearning/DIT/trunk/build-cuda-8.0/drivepx2/winograd/release/fp32im.sass",
		"/Y/dittree/sw/gpgpu/MachineLearning/DIT/trunk/build-cuda-8.0/drivepx2/winograd/release/fp16im.sass",
		"//shcompute-4/alohal-scratch/cudaopt/implicitGEMM/imGemmKernel.hxx",
		"//shcompute-4/alohal-scratch/cudaopt/implicitGEMM/cpuFunc.hxx",
		"//shcompute-4/alohal-scratch/cudaopt/implicitGEMM/a.sass",
		"//shcompute-4/alohal-scratch/cudaopt/implicitGEMM/4.sass",
		"//shcompute-4/alohal-scratch/cudaopt/usefulCode/implicit gemm/conv2d_experimental_gemm.hxx",
		"//shcompute-4/alohal-scratch/cudaopt/usefulCode/implicit gemm/conv2d_experimental_sgemm.cu",
		"//shcompute-4/alohal-scratch/cudaopt/implicitGEMM/1.sass",
		"/Y/dittree/sw/gpgpu/MachineLearning/cudnn/src/conv2d_implicit_sgemm_kernel.hxx",
		"//shcompute-4/alohal-scratch/cudaopt/smallNGemm/smallNgemm.cu",
		"//shcompute-4/alohal-scratch/cudaopt/implicitGEMM/test.py",
		"//shcompute-4/alohal-scratch/cudaopt/script/test.py",
		"//shcompute-4/alohal-scratch/cudaopt/script/occu.py",
		"//shcompute-4/alohal-scratch/cudaopt/smallNGemm/gemv",
		"//shcompute-4/alohal-scratch/cudaopt/smallNGemm/256x1.sass",
		"//shcompute-4/alohal-scratch/cudaopt/implicitGEMM/util.h",
		"//shcompute-4/alohal-scratch/cudaopt/usefulCode/implicit gemm/conv2d_experimental_sgemm_kernel.hxx",
		"//shcompute-4/alohal-scratch/cudaopt/smallNGemm/half.hxx",
		"//shcompute-4/alohal-scratch/cudaopt/smallNGemm/128x1.sass",
		"//shcompute-4/alohal-scratch/cudaopt/implicitGEMM/imGemm.cu",
		"//shcompute-4/alohal-scratch/cudaopt/twoshare/gemm128x32.cu",
		"//shcompute-4/alohal-scratch/cudaopt/biggemm/biggemm.cu",
		"//shcompute-4/alohal-scratch/cudaopt/script/testfp16.py",
		"//shcompute-4/alohal-scratch/cudaopt/script/nvhelnet.csv",
		"//shcompute-4/alohal-scratch/cudaopt/usefulCode/implicit gemm/conv2d.cu",
		"//shcompute-4/alohal-scratch/cudaopt/usefulCode/implicit gemm/imGemmKernel.hxx",
		"//shcompute-4/alohal-scratch/cudaopt/implicitGEMM/gpuFunc.hxx",
		"//shcompute-4/alohal-scratch/cudaopt/share32x8/sharegemm32x8.cu",
		"//shcompute-4/alohal-scratch/cudaopt/implicitGEMM/conv2d.py",
		"//shcompute-4/alohal-scratch/cudaopt/implicitGEMM/testfp16.py",
		"//shcompute-4/alohal-scratch/cudaopt/script/conv2d.py",
		"//shcompute-4/alohal-scratch/cudaopt/script/test2.csv",
		"//shcompute-4/alohal-scratch/cudaopt/script/autorun.py",
		"//shcompute-4/alohal-scratch/dittree/sw/gpgpu/MachineLearning/cudnn/src/conv2d_winograd.cu",
		"//shcompute-4/alohal-scratch/cudaopt/twoshare/testbar.bass",
		"//shcompute-4/alohal-scratch/cudaopt/test/makefile",
		"//shcompute-4/alohal-scratch/cudaopt/test/textest.cu",
		"//shcompute-4/alohal-scratch/cudaopt/usefulCode/akerr-sgemm/dev-gemm.cu",
		"//shcompute-4/alohal-scratch/cudaopt/usefulCode/akerr-sgemm/gemm-fast.hpp",
		"//shcompute-4/alohal-scratch/cudaopt/twoshare/twoshare.cu",
		"//shcompute-4/alohal-scratch/cudaopt/usefulCode/akerr-sgemm/util.hpp",
		"//shcompute-4/alohal-scratch/cudaopt/biascopy/biascopy.cu",
		"//shcompute-4/alohal-scratch/cudaopt/twoshare/.swp",
		"/C/Users/alohal/Desktop/metrics data.log",
		"/C/Users/alohal/Desktop/imGEMM.cu",
		"//shcompute-4/alohal-scratch/cudaopt/twoshare/twoshare",
		"//shcompute-4/alohal-scratch/cudaopt/twoshare/dbf.sass",
		"//shcompute-4/alohal-scratch/cudaopt/twoshare/sass",
		"//shcompute-4/alohal-scratch/cudaopt/twoshare/sass.sass",
		"//shcompute-4/alohal-scratch/cudaopt/twoshare/sharegemm.cu",
		"/C/Users/alohal/Desktop/biggemm.cu",
		"//shcompute-4/alohal-scratch/cudaopt/twoshare/sharegemm",
		"//shcompute-4/alohal-scratch/cudaopt/vsproj/cudatest/cudatest/cudatest/cuda1.cu",
		"//shcompute-4/alohal-scratch/cudaopt/biggemm/sts128.sass",
		"//shcompute-4/alohal-scratch/cudaopt/biggemm/sts32.sass",
		"/C/Users/alohal/sublimePro/git.sublime-project",
		"//shcompute-4/alohal-scratch/gitAloha/cudaopt/share32x8/test.log",
		"//shcompute-4/alohal-scratch/gitAloha/cudaopt/driver.sass",
		"//shcompute-4/alohal-scratch/gitAloha/cudaopt/share32x8/sassnvcc.sass"
	],
	"find":
	{
		"height": 43.0
	},
	"find_in_files":
	{
		"height": 117.0,
		"where_history":
		[
			"*.cpp,*.h,*.cu,*.hpp,*.hxx",
			"*.cpp,*.h,*.cu,*.hpp",
			"C:\\Users\\alohal\\alohal_ALOHAL-LT_5316\\alohal_ALOHAL-LT_5316\\sw\\gpgpu\\MachineLearning\\DIT\\trunk",
			"C:\\Users\\alohal\\alohal_ALOHAL-LT_5316\\alohal_ALOHAL-LT_5316\\sw\\gpgpu\\MachineLearning\\DIT\\",
			"C:\\Users\\alohal\\alohal_ALOHAL-LT_5316\\alohal_ALOHAL-LT_5316\\sw\\gpgpu\\MachineLearning\\DIT\\trunk",
			"C:\\Users\\alohal\\alohal_ALOHAL-LT_5316\\alohal_ALOHAL-LT_5316\\sw\\gpgpu\\MachineLearning\\DIT",
			"*.cpp,*.h,*.cu,*.hpp",
			"*.cpp,*.h,*.cu",
			"C:\\Users\\alohal\\alohal_ALOHAL-LT_5316\\alohal_ALOHAL-LT_5316\\sw\\gpgpu\\MachineLearning\\DIT\\",
			"*.cpp,*.h,*.cu",
			"C:\\Users\\alohal\\alohal_ALOHAL-LT_5316\\alohal_ALOHAL-LT_5316\\sw\\gpgpu\\MachineLearning\\DIT\\externals",
			"C:\\Users\\alohal\\alohal_ALOHAL-LT_5316\\alohal_ALOHAL-LT_5316\\sw\\gpgpu\\MachineLearning\\DIT\\",
			"*.cpp,*.h,*.cu",
			"*.cpp,*.h",
			"C:\\Users\\alohal\\alohal_ALOHAL-LT_5316\\alohal_ALOHAL-LT_5316\\sw\\gpgpu\\MachineLearning\\DIT\\",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"if",
			"set",
			"UV",
			"compare",
			" *",
			"gemm",
			"gemmGPU",
			"* ",
			"twoshare1283",
			"testcopy",
			"batchsize",
			"copykernel",
			"copy_kernel_launcher",
			"GP10B",
			"copykernel",
			"c_maskFil",
			"mask",
			"c_maskFil",
			"convolve_launch_float_func",
			"experimental_sgemm_launch",
			"forward_convolution_sm5x",
			"RunCPU",
			"convLayer",
			"CONV",
			"buildNet",
			"forward",
			"simpleNetParam",
			"RunAll",
			"param",
			"conv",
			"imGemm147x32",
			"conv",
			"float",
			"compare8Part",
			"compare",
			"isout",
			"simpleNetParam",
			"split8NetParam",
			"simpleNetParam",
			"layers_",
			"copy2CPU",
			"input_",
			"splitMode",
			"splitMode__",
			"splitMode_",
			"splitMode",
			"ConvNum",
			"convNum",
			"workSpace_",
			"print",
			"dst",
			"input_",
			"split8NetParam",
			"getBuf",
			"memoff",
			"1209.07",
			"1209",
			"179;",
			"padding",
			"66,1;",
			",1;",
			"2.66694",
			"3.22337",
			"2.68363",
			"Poolodim",
			"67,0;",
			"2.6703",
			"norm",
			"layersetup",
			"memOffset",
			"simpleNetParam",
			"convNum",
			"LayerSetUp",
			"ForwardGPU",
			"forward",
			"reshape",
			"rightM",
			"bool",
			"316115",
			"isRightMost",
			"func",
			"forwardCPU",
			"cpuNet",
			"2.64202",
			"PART",
			"1022.03",
			"20.4108",
			"19.0519",
			"simpleNetParam",
			"forward(",
			"forward",
			"3.224",
			"3.39719",
			"todo",
			"to_st",
			"split8NetParam",
			"main",
			"compareOutputPart",
			"convNum",
			"splitMode",
			";\n",
			"pad_w",
			"convWeight_",
			"data",
			"offset",
			"getBuf",
			"GpuData()",
			"dst->GpuData()",
			"GpuData()",
			"getBuf()",
			"gpudata()",
			"getBuf()",
			"GpuData()",
			"forward",
			"dst",
			";\n",
			"repeat",
			"parts",
			"compareSplit",
			"split8NetParam",
			"compareSplit",
			"ForwardGPU",
			"buildNet",
			"hStride",
			"ForwardGPU",
			"outputSize",
			"OutputSizeWith",
			"input_"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"map",
			"pool",
			"fp16",
			"splitMode_",
			"ConvNum_",
			"ForwardCPU",
			"forwardCPU",
			"getMem()",
			"getBuf()",
			"part",
			"PARTS",
			"compareOnePart",
			"parent->",
			"layer->",
			"ctx_.",
			"buf",
			"ctx_",
			"ctx0->getHandle()",
			"->",
			"conv2",
			"conv1",
			"conv0",
			"Params",
			"getOutputdim",
			"Params",
			"]->",
			"poolP0->",
			"convP[0]->",
			"dataP0->",
			"LOG",
			"convP[2]",
			"convP[1]",
			"convP[0]",
			"filterDim",
			"dataDim",
			"conv1",
			"dtype",
			"convP1",
			"dataP0",
			"OutputGPU2",
			"dataP0",
			"workSize",
			"scratchSize",
			"float",
			"fp16",
			"float",
			"fp16",
			"LayerSetUp",
			"ASSERT",
			"getBuf()",
			"getTensor()",
			"ResultDim",
			"OutputGPU_2",
			"OutputGPU",
			"copy2GPU",
			"cudnnLayer<dtype>",
			"cudnnLayer<float>",
			"FORWARDCPU",
			"Region",
			"Regions",
			"Region",
			"getHandle()",
			"MemSize()",
			"GpuData()",
			"Blob",
			"B",
			"Blob",
			"batch",
			"out_",
			"mem1",
			"mem0",
			"conv0->",
			"ctx0->",
			"cudnnLayer",
			"convalgo",
			"convDesc",
			"filterDesc",
			"dstTensor",
			"srcTensor",
			"cudnnTensorDescriptor_t",
			"testCudnn",
			"dstdim",
			"srcdim",
			"src",
			"tW",
			"tH",
			"tS",
			"tR",
			"tV",
			"tU",
			"tQ",
			"tP",
			"tV",
			"tU",
			"tQ",
			"tP",
			"INPUT_PER_THREAD",
			"LDG_PER_THREAD",
			"BSmemWidth",
			"32",
			"blockIdx.x",
			"CRS",
			"7",
			"rs",
			"__half",
			"srca",
			"adim",
			"srca",
			"brf",
			"arf",
			"i",
			"adim",
			"mblock",
			"k",
			"sizeM",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/cygwin/home/alohal/coding/practice/310.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2116,
						"regions":
						{
						},
						"selection":
						[
							[
								2116,
								2116
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 200.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 36.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "coding.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 170.0,
	"status_bar_visible": false,
	"template_settings":
	{
	}
}
